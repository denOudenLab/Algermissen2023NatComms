function [job, data] = TF_prepare_contrast_data(job, data)

% [job, data] = TF_prepare_generic_data(job, data)
%
% Add aggregated TF-domain data sets for selected contrast, channels, 
% frequency bands to job object previously set up via TF_update_job.m
% Preliminary data sets created via TF_prepare_contrast_data.m
% 
% INPUTS:
% job               = cell, created via TF_update_job.m, needs at least
% fields:
%   .nSub           = integer, number of subjects.
%   .nCond          = integer, number of conditions.
%   .validSubs      = numeric vector, subject numbers of valid subjects to
%   be included in analyses.
%   .channels       = vector of strings, selected channels.
%   .freq           = numeric vector, frequencies bins to be included.
%   .contrastType   = string, contrast to be used: 'Preferred', 'Action',
%   'GoPreferred', 'SalientPreferred', 'SalientAction'.
%   .responseSettings   = string, type of response setting for which
%   conditions are split, 'Go' (Go/ NoGo), 'Hand' (Left Go/ Right Go/
%   NoGo), 'none' (averaged over Go/NoGo).
%   .outcomeSettings    = string, type of outcome coding for which 
%   conditions are split, 'abs' (positive/neutral/negative), 'rel' (positive/negative), 'all' (reward/no reward/ no punishment/ punishment).
% data              = cell, need at least the following fields:
%   .TFall{iSub}.ValxAct{iCond} = aggregated data per subject per condition,
% 	created via EEGfMRIPav_OutcomeLocked_8_TF_create.m
%   .Cond           = grand average per condition across subjects.
%   .mu             = grand average across both conditions and subjects.
%
% OUTPUTS:
% job               = cell, with the following fields added:
%   .chanIdx        = numeric vector, indices of selected channels.
%   .freqIdx        = numeric vector, indices of selected frequencies.
% data              = cell, with the following fields added:
%   .SubCondTime    = per subject per condition, over time, averaged over
%   frequencies and channels.
%   .TF1 and TF2    = averaged over conditions, for permutation tests.
%   .mat1 and mat2  = averaged over channels/ frequencies/ conditions, for
%   two-line plots.
%   .matMean        = mean of mat1 and mat2 (over all conditions).
%   .matGrandMean   = matMean averaged over subjects.
%   .SubTime        = SubCondTime averaged over conditions.
%   .GrandTime      = SubTime averaged over subjects.
%   .topo2plot      = averaged over conditions/ subjects, for topoplots.
%   .TF2plot        = averaged over channels/ conditions/ subjects, for
%   time-frequency plots.
%
% EEG/fMRI STUDY, DONDERS INSTITUTE, NIJMEGEN.
% J. Algermissen, 2018-2023.
% Should work in Matlab 2018b.

% we are here:
% cd /project/3017042.02/Analyses/EEG_Scripts/OutcomeLockedAnalyses/OutcomeLocked_Grouplevel/

fprintf('Prepare data for contrast %s, channels %s, frequencies %d-%d\n', ...
    job.contrastType, strjoin(job.channels, '/'), job.freq(1), job.freq(2));

% ----------------------------------------------------------------------- %
%% Retrieve indices of selected channels and frequencies:

% Channel indices:
job.chanIdx = find(ismember(data.mu.label, job.channels)); % determine indices of channels per subject

% Frequency indices:
job.freqIdx = dsearchn(data.mu.freq', job.freq'); % indices pf lowest/highest frequency in that range
job.freqIdx = job.freqIdx(1):job.freqIdx(2); % include all indices in between

% ----------------------------------------------------------------------- %
%% Keep subjects and conditions, average over selected frequencies and channels:

% a) Average within subject and within subject/condition over frequencies and channels:
data.SubCondTime = zeros(job.nSub, job.nCond,length(data.mu.time));

for iSub = job.validSubs % 1:parAll.nSub
    for iCondi = 1:job.nCond

        fprintf('Subject %d, Condition %d \n', iSub, iCondi);
        subChanIdx = ismember(data.TFall{iSub}.ValxAct{iCondi}.label, job.channels); % determine indices of channels per subject
        data.SubCondTime(iSub, iCondi, :) = nanmean(nanmean(...
            data.TFall{iSub}.ValxAct{iCondi}.powspctrm(subChanIdx, ...
            job.freqIdx, :), 2)); % average first over frequencies, then channels

    end
end

% ----------------------------------------------------------------------- %
%% Set and initialize data objects 

% Initialize objects:

% a) Permutation test:
data.TF1 = cell(job.nSub, 1);
data.TF2 = cell(job.nSub, 1);

% b) 2-line plot:
data.mat1 = nan(1,length(data.mu.time)); 
data.mat2 = nan(1,length(data.mu.time)); 

% c) Topoplot:
data.topo2plot = data.Cond{1}; 

% ----------------------------------------------------------------------- %
%% Compute objects that require looping over subjects (i.e. permutation test):

for iSub = 1:job.nSub
    
    if strcmp(job.contrastType, 'Preferred')
        if strcmp(job.responseSettings, 'Go')

            if strcmp(job.outcomeSettings, 'rel')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize preferred.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm) ./ 2; % mean of GoPreferred and NoGoPreferred
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2}; % initialize non-preferred.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % mean of GoNonPreferred and NoGoNonPreferred

            elseif strcmp(job.outcomeSettings, 'abs')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize preferred.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % mean of GoPreferred and NoGoPreferred
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2}; % initialize non-preferred.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm) ./ 2; % mean of GoNonPreferred and NoGoNonPreferred

            elseif strcmp(job.outcomeSettings, 'all') 
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize preferred.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{7}.powspctrm) ./ 4; % mean of GoReward and GoNoPunishment and NoGoReward and NoGoNoPunishment
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2}; % initialize non-preferred.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{8}.powspctrm) ./ 4; % mean of GoNoReward and GoPunishment and NoGoNoReward and NoGoPunishment
            else
                error('Contrast %s not available for outcome setting %s', job.contrastType, job.outcomeSettings);
            end

        elseif strcmp(job.responseSettings, 'Hand')
            
            error('Contrast not completed yet');
            
        elseif strcmp(job.responseSettings, 'none')

            if strcmp(job.outcomeSettings, 'all')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize preferred.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm) ./ 2; % mean of Reward and No Punishment
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2}; % initialize non-preferred.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % mean of No Reward and Punishment
            else
                error('Contrast %s not available for outcome setting %s', job.contrastType, job.outcomeSettings);
            end
        else
            error('Unknown response setting');
        end
              
    elseif strcmp(job.contrastType, 'Action')
        if strcmp(job.responseSettings, 'Go')

            if strcmp(job.outcomeSettings, 'rel')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize Go.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{2}.powspctrm) ./ 2; % mean of Go.
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{3}; % initialize NoGo.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % mean of NoGo.

            elseif strcmp(job.outcomeSettings, 'abs')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize Go.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm) ./ 3; % mean of Go.
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{4}; % initialize NoGo.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{4}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm) ./ 3; % mean of NoGo.

            elseif strcmp(job.outcomeSettings, 'all')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize Go.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 4; % mean of Go.
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{5}; % initialize NoGo.
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{7}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{8}.powspctrm) ./ 4; % mean of NoGo.
            else
                error('Unknown outcome setting');
            end

        elseif strcmp(job.responseSettings, 'Hand')

            if strcmp(job.outcomeSettings, 'rel')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize Go.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 4; % mean of Go.
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2}; % initialize NoGo.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm) ./ 2; % mean of NoGoReward NoGoPunishment.

            elseif strcmp(job.outcomeSettings, 'abs')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize Go.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm) ./ 6; % mean of Go.
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{7}; % initialize NoGo.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{7}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{8}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{9}.powspctrm) ./ 3; % mean of NoGo.

            elseif strcmp(job.outcomeSettings, 'all')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize Go.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{7}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{8}.powspctrm) ./ 8; % mean of Go.
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{9}; % initialize NoGo.
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{9}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{10}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{11}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{12}.powspctrm) ./ 4; % mean of NoGo.

            else
                error('Unknown outcome setting');
            end
        else
            error('Unknown response setting');
        end
        
    % ------------------------------------------------------------------- %
    % Follow-up contrasts:

    elseif strcmp(job.contrastType, 'GoPreferred')
        if strcmp(job.responseSettings, 'Go')

            if strcmp(job.responseSettings, 'rel')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize GoPreferred.                
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2}; % initialize GoNonpreferred.

            elseif strcmp(job.outcomeSettings, 'abs')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1}; % initialize GoReward. 
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{3}; % initialize GoPunishment.

            elseif strcmp(job.outcomeSettings, 'all')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1};
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm) ./ 2; % initialize GoPreferred. 
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{2};
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{2}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % initialize GoNonpreferred.

            else
                error('Unknown outcome setting');
            end 
               
        elseif strcmp(job.responseSettings, 'Hand')
            error('Contrast not completed yet');
        else
            error('Unknown response setting');
        end

    elseif strcmp(job.contrastType, 'SalientPreferred')
        if strcmp(job.responseSettings, 'Go')

            if strcmp(job.responseSettings, 'rel')
                
                error('Contrast %s not available for outcome setting %s', job.contrastType, job.outcomeSettings);

            elseif strcmp(job.outcomeSettings, 'abs')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1};
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % initialize true reward. 
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{3};
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{3}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm) ./ 2; % initialize true punishment.
            elseif strcmp(job.outcomeSettings, 'all')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1};
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{5}.powspctrm) ./ 2; % initialize true reward. 
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{4};
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{4}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{8}.powspctrm) ./ 2; % initialize true punishment.

            else
                error('Unknown outcome setting');
            end    
            
        elseif strcmp(job.responseSettings, 'Hand')
            error('Contrast not completed yet');
        else
            error('Unknown response setting');
        end

    elseif strcmp(job.contrastType, 'SalientAction')
        if strcmp(job.responseSettings, 'Go')

            if strcmp(job.responseSettings, 'rel')
                error('Contrast %s not available for outcome setting %s', job.contrastType, job.outcomeSettings);

            elseif strcmp(job.outcomeSettings, 'abs')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1};
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{3}.powspctrm) ./ 2; % initialize Go. 
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{4};
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{4}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{6}.powspctrm) ./ 2; % initialize NoGo.

            elseif strcmp(job.outcomeSettings, 'all')
                data.TF1{iSub} = data.TFall{iSub}.ValxAct{1};
                data.TF1{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{1}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{4}.powspctrm) ./ 2; % initialize Go. 
                data.TF2{iSub} = data.TFall{iSub}.ValxAct{5};
                data.TF2{iSub}.powspctrm = real(...
                    data.TFall{iSub}.ValxAct{5}.powspctrm + ...
                    data.TFall{iSub}.ValxAct{8}.powspctrm) ./ 2; % initialize NoGo.
            else
                error('Unknown outcome setting');
            end       
         
        elseif strcmp(job.responseSettings, 'Hand')
            error('Contrast not completed yet');
        else
            error('Unknown response setting');
        end

    else
        error('Unknown contrast setting');
    end
end
% ----------------------------------------------------------------------- %
%% COMPUTE OBJECTS WITHOUT LOOPING over subjects:

if strcmp(job.contrastType, 'Preferred')

    if strcmp(job.responseSettings, 'Go') 

        if strcmp(job.outcomeSettings, 'rel') 
            % a) 2-line plot (averaged over subjects):
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 3, :)) ./ 2); % preferred
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 4, :)) ./ 2); % non-preferred
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{3}.powspctrm) ./2 - (...
                data.Cond{2}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 2; % preferred - non-preferred
            % c) TF plot:
                data.TF2plot = (...
                    data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{2}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{4}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'abs') 
            % a) 2-line plot (averaged over subjects):
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 4, :)) ./ 2); % preferred
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 3, :) + ...
                data.SubCondTime(job.validSubs, 6, :)) ./ 2); % non-preferred
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{4}.powspctrm) ./2 - (...
                data.Cond{3}.powspctrm + ...
                data.Cond{6}.powspctrm) ./ 2; % preferred - non-preferred
            % c) TF plot:
                data.TF2plot = (...
                    data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{6}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'all') 
            % a) 2-line plot (averaged over subjects):
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 3, :) + ...
                data.SubCondTime(job.validSubs, 5, :) + ...
                data.SubCondTime(job.validSubs, 7, :)) ./ 4); % preferred
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 4, :) + ...
                data.SubCondTime(job.validSubs, 6, :) + ...
                data.SubCondTime(job.validSubs, 8, :)) ./ 4); % nonpreferred
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{3}.powspctrm + ...
                data.Cond{5}.powspctrm + ...
                data.Cond{7}.powspctrm) ./ 4 - (...
                data.Cond{2}.powspctrm + ...
                data.Cond{4}.powspctrm + ...
                data.Cond{6}.powspctrm + ...
                data.Cond{8}.powspctrm) ./ 4; % preferred - nonpreferred
            % c) TF plot:
                data.TF2plot = (...
                    data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{3}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{5}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{7}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{2}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{6}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{8}.powspctrm(job.chanIdx, :, :)) ./ 4;

        else
            error('Unknown outcome setting');
        end  
          
    elseif strcmp(job.responseSettings, 'none')

        if strcmp(job.outcomeSettings, 'all') 
            % a) 2-line plot (averaged over subjects):
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 3, :)) ./ 2); % preferred
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 4, :)) ./ 2); % non-preferred
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{3}.powspctrm) ./ 2  - (...
                data.Cond{2}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 2; % preferred - non-preferred
            % c) TF plot:
                data.TF2plot = (...
                    data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{2}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{4}.powspctrm(job.chanIdx, :, :)) ./ 2;
        else
            error('Unknown outcome setting');
        end
    else
        error('Inknown response setting');
    end

elseif strcmp(job.contrastType, 'Action')

    if strcmp(job.responseSettings, 'Go')

        if strcmp(job.outcomeSettings, 'rel')
            % a) 2-line plot:
            data.mat1 = squeeze((data.SubCondTime(job.validSubs, 1, :) + data.SubCondTime(job.validSubs, 2, :)) ./ 2); % Go.
            data.mat2 = squeeze((data.SubCondTime(job.validSubs, 3, :) + data.SubCondTime(job.validSubs, 4, :)) ./ 2); % NoGo.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{2}.powspctrm) ./ 2 - (...
                data.Cond{3}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{2}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'abs')
            % a) 2-line plot:
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 3, :)) ./ 3); % Go.
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 4, :) + ...
                data.SubCondTime(job.validSubs, 5, :) + ...
                data.SubCondTime(job.validSubs, 6, :)) ./ 3); % NoGo.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{2}.powspctrm + ...
                data.Cond{3}.powspctrm) ./ 3 - (...
                data.Cond{4}.powspctrm + ...
                data.Cond{5}.powspctrm + ...
                data.Cond{6}.powspctrm) ./ 3;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{2}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{5}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{6}.powspctrm(job.chanIdx, :, :)) ./ 2;

    elseif strcmp(job.outcomeSettings, 'all')
            % a) 2-line plot:
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 3, :) + ...
                data.SubCondTime(job.validSubs, 4, :)) ./ 4); % Go.
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 5, :) + ...
                data.SubCondTime(job.validSubs, 6, :) + ...
                data.SubCondTime(job.validSubs, 7, :) + ...
                data.SubCondTime(job.validSubs, 8, :)) ./ 4); % NoGo.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{2}.powspctrm + ...
                data.Cond{3}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 4 - (...
                data.Cond{5}.powspctrm + ...
                data.Cond{6}.powspctrm + ...
                data.Cond{7}.powspctrm + ...
                data.Cond{8}.powspctrm) ./ 4;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{2}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{5}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{6}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{7}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{8}.powspctrm(job.chanIdx, :, :)) ./ 4;

        else
            error('Unknown outcome setting');
        end

    elseif strcmp(job.responseSettings, 'Hand')

        if strcmp(job.outcomeSettings, 'rel')
            % a) 2-line plot:
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 3, :) + ...
                data.SubCondTime(job.validSubs, 4, :)) ./ 4); 
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 5, :) + ...
                data.SubCondTime(job.validSubs, 6, :)) ./ 2); 
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{2}.powspctrm + ...
                data.Cond{3}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 4 - (...
                data.Cond{5}.powspctr + ...
                data.Cond{6}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{2}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :)) ./ 4 - (...
                data.Cond{5}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{6}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'abs')
            % a) 2-line plot:
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 3, :) + ...
                data.SubCondTime(job.validSubs, 4, :) + ...
                data.SubCondTime(job.validSubs, 5, :) + ...
                data.SubCondTime(job.validSubs, 6, :)) ./ 6); 
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 7, :) + ...
                data.SubCondTime(job.validSubs, 8, :) + ...
                data.SubCondTime(job.validSubs, 9, :)) ./ 3); 
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{2}.powspctrm + ...
                data.Cond{3}.powspctrm + ...
                data.Cond{4}.powspctrm + ...
                data.Cond{5}.powspctrm + ...
                data.Cond{6}.powspctrm) ./ 6 - (...
                data.Cond{7}.powspctrm + ...
                data.Cond{8}.powspctrm + ...
                data.Cond{9}.powspctrm) ./ 3;
            % c) TFplot:
                data.TF2plot = (...
                    data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{2}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{3}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{4}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{5}.powspctrm(job.chanIdx, :, :) + ...
                    data.Cond{6}.powspctrm(job.chanIdx, :, :)) ./ 6 - (...
                    data.Cond{7}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{8}.powspctrm(job.chanIdx, :, :) - ...
                    data.Cond{9}.powspctrm(job.chanIdx, :, :)) ./ 3;

        elseif strcmp(job.outcomeSettings, 'all')
            % a) 2-line plot:
            data.mat1 = squeeze((...
                data.SubCondTime(job.validSubs, 1, :) + ...
                data.SubCondTime(job.validSubs, 2, :) + ...
                data.SubCondTime(job.validSubs, 3, :) + ...
                data.SubCondTime(job.validSubs, 4, :) + ...
                data.SubCondTime(job.validSubs, 5, :) + ...
                data.SubCondTime(job.validSubs, 6, :) + ...
                data.SubCondTime(job.validSubs, 7, :) + ...
                data.SubCondTime(job.validSubs, 8, :)) ./ 8); 
            data.mat2 = squeeze((...
                data.SubCondTime(job.validSubs, 9, :) + ...
                data.SubCondTime(job.validSubs, 10, :) + ...
                data.SubCondTime(job.validSubs, 11, :) + ...
                data.SubCondTime(job.validSubs, 12, :)) ./ 4); 
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{2}.powspctrm + ...
                data.Cond{3}.powspctrm + ...
                data.Cond{4}.powspctrm + ...
                data.Cond{5}.powspctrm + ...
                data.Cond{6}.powspctrm + ...
                data.Cond{7}.powspctrm + ...
                data.Cond{8}.powspctrm) ./ 8 - (...
            	data.Cond{9}.powspctrm + ...
                data.Cond{10}.powspctrm + ...
                data.Cond{11}.powspctrm + ...
                data.Cond{12}.powspctrm) ./ 4;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{2}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{5}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{6}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{7}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{8}.powspctrm(job.chanIdx, :, :)) ./ 8 - (...
                data.Cond{9}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{10}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{11}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{12}.powspctrm(job.chanIdx, :, :)) ./ 2;

        else
            error('Unknown outcome setting');
        end
    else
        error('Unknown response setting');
    end
    
% ----------------------------------------------------------------------- %
% Follow-up contrasts:

elseif strcmp(job.contrastType, 'GoPreferred')

    if strcmp(job.responseSettings, 'Go')

        if strcmp(job.outcomeSettings, 'rel')

            % a) 2-line plot:
            data.mat1 = squeeze(data.SubCondTime(job.validSubs, 1, :)); % preferred Go.
            data.mat2 = squeeze(data.SubCondTime(job.validSubs, 2, :)); % nonpreferred Go.
            % b) Topoplot:
            data.topo2plot.powspctrm = data.Cond{1}.powspctrm - data.Cond{2}.powspctrm;
            % c) TFplot:
            data.TF2plot = (data.Cond{1}.powspctrm(job.chanIdx, :, :) - data.Cond{2}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'abs')

            % a) 2-line plot:
            data.mat1 = squeeze(data.SubCondTime(job.validSubs, 1, :)); % GoReward.
            data.mat2 = squeeze(data.SubCondTime(job.validSubs, 3, :)); % GoPunishment.
            % b) Topoplot:
            data.topo2plot.powspctrm = data.Cond{1}.powspctrm - data.Cond{3}.powspctrm;
            % c) TFplot:
            data.TF2plot = (data.Cond{1}.powspctrm(job.chanIdx, :, :) - data.Cond{3}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'all')

            % a) 2-line plot:
            data.mat1 = squeeze((data.SubCondTime(job.validSubs, 1, :) + data.SubCondTime(job.validSubs, 3, :)) ./ 2); % preferred Go.
            data.mat2 = squeeze((data.SubCondTime(job.validSubs, 2, :) + data.SubCondTime(job.validSubs, 4, :)) ./ 2); % non-preferred Go.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{3}.powspctrm) ./ 2 - (...
                data.Cond{2}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{2}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :)) ./ 2;

        else
            error('Unknown outcome setting');
        end

    elseif strcmp(job.responseSettings, 'Hand')
        error('Contrast GoPreferred under response setting Hand not yet implemented')

    else
        error('Unknown response setting');
    end

elseif strcmp(job.contrastType, 'SalientPreferred')
    if strcmp(job.responseSettings, 'Go')

        if strcmp(job.outcomeSettings, 'rel')
            error('No contrast %s under outcome setting %s', job.contrastType, job.outcomeSettings);

        elseif strcmp(job.outcomeSettings, 'abs')
            % a) 2-line plot:
            data.mat1 = squeeze((data.SubCondTime(job.validSubs, 1, :) + data.SubCondTime(job.validSubs, 4, :)) ./ 2); % true Reward.
            data.mat2 = squeeze((data.SubCondTime(job.validSubs, 3, :) + data.SubCondTime(job.validSubs, 6, :)) ./ 2); % true Punishment.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 2 - (...
                data.Cond{3}.powspctrm + ...
                data.Cond{6}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{6}.powspctrm(job.chanIdx, :, :)) ./ 2;

        elseif strcmp(job.outcomeSettings, 'all')
            % a) 2-line plot:
            data.mat1 = squeeze((data.SubCondTime(job.validSubs, 1, :) + data.SubCondTime(job.validSubs, 5, :)) ./ 2); % true Reward.
            data.mat2 = squeeze((data.SubCondTime(job.validSubs, 4, :) + data.SubCondTime(job.validSubs, 8, :)) ./ 2); % true Punishment.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{5}.powspctrm) ./ 2 - (...
                data.Cond{4}.powspctrm + ...
                data.Cond{8}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{5}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{8}.powspctrm(job.chanIdx, :, :)) ./ 2;

        else
            error('Unknown outcome setting');
        end

    elseif strcmp(job.responseSettings, 'Hand')
            error('No contrast %s under response setting %s', job.contrastType, job.responseSettings);

    else
        error('Unknown response setting');
    end

elseif strcmp(job.contrastType, 'SalientAction')
    if strcmp(job.responseSettings, 'Go')

        if strcmp(job.outcomeSettings, 'rel')
            error('No contrast %s under outcome setting %s', job.contrastType, job.outcomeSettings);

        elseif strcmp(job.outcomeSettings, 'abs')
            % a) 2-line plot:
            data.mat1 = squeeze((data.SubCondTime(job.validSubs, 1, :) + data.SubCondTime(job.validSubs, 3, :)) ./ 2); % Go.
            data.mat2 = squeeze((data.SubCondTime(job.validSubs, 4, :) + data.SubCondTime(job.validSubs, 6, :)) ./ 2); % NoGo.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{3}.powspctrm) ./ 2 - (...
                data.Cond{4}.powspctrm + ...
                data.Cond{6}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{3}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{6}.powspctrm(job.chanIdx, :, :)) ./ 2;  
          
        elseif strcmp(job.outcomeSettings, 'all')
            % a) 2-line plot:
            data.mat1 = squeeze((data.SubCondTime(job.validSubs, 1, :) + data.SubCondTime(job.validSubs, 4, :)) ./ 2); % Go.
            data.mat2 = squeeze((data.SubCondTime(job.validSubs, 5, :) + data.SubCondTime(job.validSubs, 8, :)) ./ 2); % NoGo.
            % b) Topoplot:
            data.topo2plot.powspctrm = (...
                data.Cond{1}.powspctrm + ...
                data.Cond{4}.powspctrm) ./ 2 - (...
                data.Cond{5}.powspctrm + ...
                data.Cond{8}.powspctrm) ./ 2;
            % c) TFplot:
            data.TF2plot = (...
                data.Cond{1}.powspctrm(job.chanIdx, :, :) + ...
                data.Cond{4}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{5}.powspctrm(job.chanIdx, :, :) - ...
                data.Cond{8}.powspctrm(job.chanIdx, :, :)) ./ 2;

        else
            error('Unknown outcome setting');
        end

    elseif strcmp(job.responseSettings, 'Hand')
            error('No contrast %s under response setting %s', job.contrastType, job.responseSettings);

    else
        error('Unknown response setting');
    end

else
    error('Unknown contrast type');
end

% ----------------------------------------------------------------------- %
%% TFplot:

if length(job.chanIdx) > 1 % if > 1 data.channel: first average over channels
    data.TF2plot = nanmean(data.TF2plot, 1); % aver over first dimension i.e. channels
end
data.TF2plot = squeeze(data.TF2plot); % eliminate first dimension 

% ----------------------------------------------------------------------- %
%% Error bounds for 2-line plots:
% Error bounds based on Cousinea-Morey method:

data.matDiff        = data.mat1 - data.mat2; % difference between conditions for each subject
data.matMean        = (data.mat1 + data.mat2) ./ 2; % mean across conditions for each subject
data.matGrandMean   = nanmean(data.matMean); % grand average across subjects
data.matGrandMean   = nanmean(data.matMean); % for Cousineau method
data.SubTime        = squeeze(nanmean(data.SubCondTime, 2)); % average over conditions for Cousineau method
data.GrandTime      = squeeze(nanmean(data.SubTime(job.validSubs, :), 1)); % average over subjects for Cousineau method

fprintf('Finished preparing data for contrast %s, channels %s, frequencies %d-%d\n', job.contrastType, strjoin(job.channels, '/'), job.freq(1), job.freq(2))

end % END OF FUNCTION.